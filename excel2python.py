from dataclasses import dataclass
import ast

from openpyxl import load_workbook
from openpyxl.formula.tokenizer import Tokenizer

from util import *
from shunting_yard import ShuntingYard, FunctionRewriter


def build_python_class_ast(class_name, variable_cell_info, methods):
    def get_self_attribute(attribute_name, ctx):
        return ast.Attribute(value=ast.Name(id="self", ctx=ast.Load()), attr=attribute_name, ctx=ctx)

    def create_class_def(class_name):
        return ast.ClassDef(name=class_name, bases=[], keywords=[], body=[], decorator_list=[])

    def create_method_def(class_def, method_name, method_args=[], docstring=""):
        f = ast.FunctionDef(name=method_name, body=[], decorator_list=[])
        docstring = "\n        Autogenerated method\n" + docstring
        if len(method_args) > 0:
            docstring += "        Args:\n"

        f.args = ast.arguments(posonlyargs=[], kwonlyargs=[], kw_defaults=[], defaults=[], args=[ast.arg("self")])
        for arg in method_args:
            f.args.args.append(ast.arg(arg.variable_name, ast.Name(id="float", ctx=ast.Load())))
            f.args.defaults.append(ast.Constant(float(arg.value)))
            docstring += f"            {arg.variable_name}: Auto-generated variable defined at {arg.coordinate}.\n"

        f.body.append(ast.Expr(value=ast.Constant(value=docstring)))

        class_def.body.append(f)

        return f

    class_def = create_class_def(class_name)
    init_def = create_method_def(class_def, "__init__", variable_cell_info.values())
    for self_var in variable_cell_info.values():
        init_def.body.append(
            ast.Assign(
                targets=[get_self_attribute(self_var.variable_name, ast.Store())],
                value=ast.Name(self_var.variable_name, ctx=ast.Load())
            )
        )

    for method_info in methods:
        docstring_formatted = f"        Excel formula defined in cell {method_info.coordinate} \n        Original formula: {method_info.value}\n"
        method_def = create_method_def(class_def, method_info.variable_name,
                                       docstring=docstring_formatted)
        method_def.body.append(methods[method_info])

    return class_def


def excel_to_python(xlsx_file, sheet_index, alternating_infos=[], horizontal_infos=[]):
    # Excel sourced from https://www.nrel.gov/grid/solar-resource/clear-sky.html
    workbook = load_workbook(filename=xlsx_file, read_only=True)
    sheet = workbook[workbook.sheetnames[sheet_index]]

    cell_infos = {}
    for cell_info_range in alternating_infos:
        cell_infos.update(get_alternating_cell_info(sheet[cell_info_range[0]:cell_info_range[1]]))

    for cell_info_range in horizontal_infos:
        (header_start, header_end) = cell_info_range[0]
        headers = sheet[header_start:header_end][0]

        (cells_start, cells_end) = cell_info_range[1]
        cells = sheet[cells_start:cells_end][0]

        cell_infos.update(get_horizontal_cell_info(headers, cells))

    variable_cells = {ci.coordinate: ci for ci in filter(lambda ci: not ci.is_formula(), cell_infos.values())}
    method_cells = {ci.coordinate: ci for ci in filter(lambda ci: ci.is_formula(), cell_infos.values())}

    methods = {}
    for method_cell in method_cells.values():
        tokens = Tokenizer(method_cell.value)
        shunting_yard = ShuntingYard(tokens.items, cell_infos)
        method_body = FunctionRewriter().visit(shunting_yard.process())
        if not isinstance(method_body, ast.If):
            method_body = ast.Return(value=method_body)

        methods[method_cell] = method_body

    cls_ast = build_python_class_ast("BirdClearSkyModel", variable_cells, methods)
    code = "import math\n\n" + ast.unparse(ast.fix_missing_locations(cls_ast))
    return code
